{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","Link","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","AboutText","role","placeholder","onClick","toggleMode","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpclick","newText","toUpperCase","showAlert","handleLoclick","toLowerCase","handlecopy","document","getElementById","select","navigator","clipboard","writeText","handleclean","handleExtraSpaces","split","join","length","defaultProps","title","Alert","alert","word","lower","charAt","slice","capitalize","msg","About","myStyle","setMyStyle","btntext","setbtntext","class","data-bs-parent","toggleStyle","App","setmode","setAlert","message","setTimeout","Router","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.4aae726c.chunk.js","sourcesContent":["import React from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\" >\r\n      <Link className=\"navbar-brand\" to=\"/\">Texutils</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link \" aria-current=\"page\"  to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.AboutText}</Link>\r\n          \r\n          </li>\r\n          \r\n        </ul>\r\n        <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form>\r\n        <div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick = {props.toggleMode}type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>  )\r\n}\r\n\r\n// Navbar.prototype = {\r\n//     title: PropTypes.string.isRequired,\r\n//      AboutText:PropTypes.string\r\n// }\r\n\r\nNavbar.defaultProps ={\r\n    title:'set title here',\r\n    AboutText:'About'\r\n}\r\n\r\n","import React,{useState} from 'react'   // rfc shortcut to create \r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // upper case\r\n    const handleUpclick = () =>{\r\n        // console.log(\"uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase\",\"success\")\r\n    }\r\n\r\n    // lower case\r\n    const handleLoclick =()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase\",\"success\")\r\n    }\r\n\r\n    // clean text\r\n    const handleclean = () =>{\r\n        let newText = \"\"\r\n        setText(newText)\r\n        props.showAlert(\"copied to cleared\",\"success\")\r\n    }\r\n\r\n    // remove Extra white spaces in text\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed\",\"success\")\r\n    }\r\n    // copy the text\r\n    const handlecopy = ()=>{\r\n        var text = document.getElementById(\"myBox\")\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"copied to clipboard\",\"success\")\r\n    }\r\n\r\n    const handleOnchange = (event) =>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    // Text = \"hero\"  // wrong way to change the text\r\n    // setText(\"new Text\");\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{backgroundColor: props.mode ==='dark'?'grey':'white', color:props.mode ==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpclick}>Convert to Uppercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoclick}>Convert to Lowercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handlecopy}>Copy Text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleclean}>clean text</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove white spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>\r\n        <h2>Your Text summary</h2>\r\n        <p>{(text.split(\" \").length)-1} words,{text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read characters</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert&& <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n \r\n  </div>\r\n   \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n  const [myStyle, setMyStyle]= useState({\r\n    color:'white',\r\n    backgroundColor:'black'\r\n  })\r\n\r\n  const [btntext,setbtntext] = useState(\"Enable Light Mode\")\r\n\r\n  const toggleStyle= ()=>{\r\n    if(myStyle.color === 'white'){\r\n    setMyStyle({\r\n      color:'black',\r\n      backgroundColor:'white',\r\n      // border:'1px solid white'\r\n    })\r\n    setbtntext(\"Enable dark Mode\")\r\n  }\r\n  else{\r\n    setMyStyle({\r\n      color:'white',\r\n      backgroundColor:'black'\r\n    })\r\n    setbtntext(\"Enable light Mode\")\r\n  }\r\n}\r\n \r\n  return (\r\n    <div className=\"container\" style={myStyle}>\r\n      <h1 className=\"my-3\">About Us</h1>\r\n      <div class=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\">\r\n      <button class=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" style={myStyle} data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\">\r\n      <button class=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"accordion-item\">\r\n    <h2 class=\"accordion-header\">\r\n      <button class=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" class=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n      <div class=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"container my-3\">\r\n<button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btntext} </button>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react';\nimport './Appa.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport {Routes} from 'react-router'\nimport React from \"react\";\n\n\nimport {\n  BrowserRouter as Router,\n  // Switch,\n  Route\n  // Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light'); // weather dark mode is enable or not\n  const [alert,setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n\n  const toggleMode= () =>{\n    if(mode === 'light'){\n      setmode('dark')\n      document.body.style.backgroundColor ='#042743'\n      showAlert(\"dark mode has been enabled\",\"success\")\n      // document.title = \"dark mode enable\"\n\n// this is for show something in every sec like virus and all.....\n      // setInterval(() => {\n      //   document.title = 'playWithText is amazing Mode'\n      // }, 2000);\n\n      // setInterval(() => {\n      //   document.title='install playWithText Now'\n      // }, 1500);\n\n\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor ='white'\n      showAlert(\"light mode has been enabled\",\"success\")\n      // document.title = \"light mode enable\"\n    }\n\n  }\n\n  return (\n    <>\n      {/* <Navbar title=\"Textutils\" AboutText=\"About us\" />\n      <Navbar/> */}\n      <Router>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode = {toggleMode} />\n      <Alert alert = {alert}/>\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n            <Routes >\n            <Route exact path=\"/about\" element={<About  mode={mode}/>}> </Route>\n            <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text area\" mode={mode} />}></Route>\n            </Routes>\n            {/* <Router path=\"/\">\n              {/* <TextForm showAlert={showAlert} heading = \"Enter the text area\" mode={mode}/> */}\n            {/* </Router> */} */\n        {/* </Switch>  */}\n      </div>\n      </Router>\n    </>\n  );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}